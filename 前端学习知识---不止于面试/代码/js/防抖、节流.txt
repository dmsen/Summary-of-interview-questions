函数防抖（debounce）：
当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。
代码如下：
function debounce(fn,wait){
	var timer = null
	return function(){
	  if(timer ! ==null){	clearTimeout(timer)}
	  timer = setTimeout(fn,wait)
}}
function random(){
 console.log( Math.random())
}
window.addEventListener('scroll',debounce(random,1000))
持续触发scroll事件时，事件处理函数handle只在停止滚动1000毫秒之后才会调用一次，也就是说在持续触发scroll事件的过程中，事件处理函数handle一直没有执行。

函数节流：
当持续触发事件时，保证一定时间段内只调用一次事件处理函数。
代码如下：
var throttle =function(fn,delay){}
	var prev = Date.now();
	return function(){
 		var context = this
		var args = arguments
		var now = Date.now()
		if(now - prev >=delay){
			fn.apply(context,args);
			prev  = Date.now()
}
}
function random(){
 console.log( Math.random())
}
window.addEventListener('scroll',throttle(random,1000))

关于arguments：
function log(){
 console.log( arguments,Array.isArray(arguments))
}
log(1,2)  // [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ] false
类数组对象：arguments