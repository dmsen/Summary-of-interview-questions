this ，函数执行的上下文，可以通过 apply ， call ， bind 改变 this 的
指向。对于匿名函数或者直接调用的函数来说，this指向全局上下文（浏览器
为window，NodeJS为 global ），剩下的函数调用，那就是谁调用它，
this 就指向谁。当然还有es6的箭头函数，箭头函数的指向取决于该箭头函
数声明的位置，在哪里声明， this 就指向哪里

setInterval和setTimeout的this指向全局上下文 及window

在setInterval和setTimeout中传入函数时，函数中的this会指向window对象
例子：
var num = 0;
function Obj (){
 this.num = 1,
 this.getNum = function(){
 console.log(this.num);
 },
 this.getNumLater = function(){
 setTimeout(function(){
  console.log(this.num);
 }, 1000)
 }
}
var obj = new Obj; 
obj.getNum();//1　　打印的为obj.num，值为1
obj.getNumLater()//0　　打印的为window.num，值为0
从上述例子中可以看到setTimeout中函数内的this是指向了window对象，这是由于setTimeout()调用的代码运行在与所在函数完全分离的执行环境上. 这会导致这些代码中包含的 this 关键字会指向 window (或全局)对象。详细可参考MDN setTimeout