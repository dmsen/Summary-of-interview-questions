最近使用vue + Echarts 实现vue项目的数据可视化功能的时候，发现随着组件的增多，组件里Echarts绘图的增多，页面操作越来越卡顿，点击数据比较大的组件时，Echarts绘图渲染页面的速度倒是挺快，但是当我点击切换其他组件统计图时，出现了让人难以忍受的卡顿，有好几次都网页直接崩溃，百度找了好多答案，最后终于得知问题出在哪以及解决方案，便写在这里让受同样问题烦恼的同学能够快速解决。
原因：
每一个图例在没有数据的时候它会创建一个定时器去渲染气泡，页面切换后，echarts图例是销毁了，但是这个echarts的实例还在内存当中，同时它的气泡渲染定时器还在运行。这就导致Echarts占用CPU高，导致浏览器卡顿，当数据量比较大时甚至浏览器崩溃。

解决方法：
在mounted()方法和destroy()方法之间加一个beforeDestroy()方法释放该页面的chart资源，我也试过使用dispose()方法，但是dispose销毁这个图例，图例是不存在了，但图例的resize()方法会启动，则会报没有resize这个方法，而clear()方法则是清空图例数据，不影响图例的resize，而且能够释放内存，切换的时候就很顺畅了

  beforeDestroy () {
 this.chart.clear()
  },
 
经过测试，加了这个方法之后不存在卡顿现象，开心~


在vue中使用echart卡顿和内存溢出的问题
内存溢出原因：
如果在mounted/created 钩子中使用了第三方库初始化（比如echarts），需要在beforeDestroy 中做对应销毁处理。如果没有及时销毁，会造成每次进入该页面时都会创建一遍这个实例。而且vue是单页面应用，页面路由切换后，内存未释放。所以需要我们手动在生命周期beforeDestroy 的时候及时销毁。如果使用了keep-alive会导致生命周期beforeDestroy 失效，此时你可以转而使用生命周期deactivated或者在该页面不使用keep-alive。

代码案例：
  beforeDestroy() {
    if (this.myChart) {
      this.myChart.clear()
      this.myChart.dispose()
      this.myChart = null
      window.removeEventListener('resize', () => { this.myChart.resize() })
    }
  },

上面代码在beforeDestroy时及时销毁echarts实例。

卡顿原因：
数据量大及某个时间段内存不足

解决方案：
1.不要把实例放在data里
2.beforeDestroy等生命周期及时销毁实例
3.在this.$nextTick后进行图表渲染
4.控制定时器的使用，init之前销毁已经存在的echarts实例
