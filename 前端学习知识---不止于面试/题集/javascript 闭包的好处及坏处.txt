变量的作用域无非就两种：全局变量和局部变量。

javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。

如何从外部读取函数内部的局部变量？（使用闭包）
在函数内部，再定义一个函数。
　　function f1（）{
　　var n=999;
　　function f2（）{
　　alert（n）; // 999
　　}
　　}
在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。
这就是Javascript语言特有的“链式作用域”结构（chain scope），

例子:
function fn1(){
  var obj ={
	name:"初始值"
}
  function fn2(){
 	obj.name = "闭包函数1的值"
	console.log(obj.name)
}
  function fn3(){
	obj.name = "闭包函数2的值"
	console.log(obj.name)
}
  function fn4(){
	console.log(obj.name)
}
  fn4()
  fn3()
  fn2()
  fn4()
}
fn1()
输出结果如下
初始值
闭包函数2的值
闭包函数1的值
闭包函数1的值

闭包的概念：闭包就是能够读取其他函数内部变量的函数。
创建闭包的常见方式：就是在一个函数里创建另一个函数
［javascript］ view plain copyfunction fun（）{
　　return function{
　　alert（“hello”）;
　　}
　　}
　闭包的好处有：

　　1.缓存

　　2.面向对象中的对象

　　3.实现封装，防止变量跑到外层作用域中，发生命名冲突

　　4.匿名自执行函数，匿名自执行函数可以减小内存消耗

　　以上四条详见（http://blog.csdn.net/sunlylorn/article/details/6534610）

闭包的坏处：
　　1.内存消耗
　　通常来说，函数的活动对象会随着执行期上下文一起销毁，但是，由于闭包引用另外一个函数的活动对象，因此这个活动对象无法被销毁，这意味着，闭包比一般的函数需要更多的内存消耗。尤其在IE浏览器中需要关注。由于IE使用非原生javascript对象实现DOM对象，因此闭包会导致内存泄露问题，例如：

［javascript］ view plain copyfunction A（）{
　　var a=document.createElement（“div”），//
　　msg=“Hello”;
　　a.onclick=function（）{
　　alert（msg）;
　　}
　　}
　　A（）;
以上的闭包会在IE下导致内存泄露，假设A（）执行时创建的作用域对象ScopeA，ScopeA引用了DOM对象a，DOM对象a引用了function（aleert（msg）），函数function（alert（msg））引用了ScopeA，这是一个循环引用，在IE会导致内存泄露。
2.性能问题
使用闭包时，会涉及到跨作用域访问，每次访问都会导致性能损失。
因此在脚本中，最好小心使用闭包，它同时会涉及到内存和速度问题。不过我们可以通过把跨作用域变量存储在局部变量中，然后直接访问局部变量，来减轻对执行速度的影响。